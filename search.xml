<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[现代化Vim之路]]></title>
    <url>%2F2018%2F07%2F19%2Fmodern-vim-way%2F</url>
    <content type="text"><![CDATA[如何使用Vim 8 来打造现代的Vim开发体验？ 持续更新中…… 升级到 Vim 8Ubuntu 16.041234sudo apt install software-properties-commonsudo add-apt-repository ppa:jonathonf/vimsudo apt updatesudo apt install vim 使用Vim-Plug管理插件Github链接 安装脚本： 12curl -fLo ~/.vim/autoload/plug.vim --create-dirs \https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS 编译带有OpenSSL的程序]]></title>
    <url>%2F2018%2F07%2F17%2Fmacos-compile-with-openssl%2F</url>
    <content type="text"><![CDATA[在macOS上编译带有OpenSSL的程序时，往往可能会遇到报错找不到openssl头文件的错误。 这是因为Apple为了推广自己的加密标准而隐藏了系统中OpenSSL的头文件，这个时候就需要手动设置头文件地址。可以使用如下命令来设置环境变量，指定系统中OpenSSL头文件的位置。 12export LDFLAGS="-L/usr/local/opt/openssl/lib"export CPPFLAGS="-I/usr/local/opt/openssl/include"]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>OpenSSL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kerbal 火箭物理学 101]]></title>
    <url>%2F2017%2F08%2F16%2Fkerbal-theory-intro%2F</url>
    <content type="text"><![CDATA[Kerbal Space Program 是我非常喜欢的一款游戏，它是关于火箭、飞船与太空探索的一款半仿真游戏。玩家作为Kerbin(游戏中的地球)宇航局的管理者，要带领手下的Kerbal（游戏中的Kerbin人）建造火箭飞船、完成合约任务、募集资金、研发科技，最终探索整个太阳系。 之所以称这款游戏是半仿真游戏，是因为它在真实性和游戏性中取得了一个平衡。他采用了相对严谨的物理引擎，模拟了整个太阳系的运转，对玩家也提出了较高的物理知识要求；同时，它作为一款游戏又对玩家隐藏了真实航空的繁琐细节，专注于最核心、最刺激的部分。当玩家乘着自己造的火箭，完成一个漂亮的霍曼转移，最终被Mun(月球)引力捕获，登上Mun插上宇航局旗帜，回头遥望Kerbin的时候，一股难以言喻的自豪感油然而生。 以上是关于KSP的一个梗：千万别在NASA提Kerbal Space Program 这篇博客就介绍一下KSP基本的火箭物理学，帮助大家理解KSP中的物理引擎，造出更加合理的火箭。 推重比火箭如何工作？ 我们一般指的火箭是指燃料燃烧形成喷流，以此产生反作用力获得推力的装置。在获得推力之后，就可以获得加速度、挣脱重力的粗暴束缚。 那么推力和重力的比例，就是推重比(TWR)，英文全称是Thrust Weight Ratio。 经过简单的推理我们可以知道： TWR &lt;= 1 的火箭是飞不起来的，因为连重力都无法克服； TWR &gt; 1 的时候，火箭才可以起飞，并且TWR越大，全力加速时的加速度就越大。 那么是不是TWR越大越好呢？并不是这样，有几个主要的原因： TWR越大，在地表发射的时候加速度会过快，就是说会在大气层内达到更高的速度，这带来更多的摩擦，浪费燃料同时还会带来过热问题。 即便是在没有摩擦真空之中，TWR也不是越大越好，因为过高的TWR往往意味着更重的引擎，而引擎的死重过高也会带来燃料浪费的问题。 那么合理的推重比大概在什么一个范围呢？ 按照一般的经验来说，在地表起飞的阶段，TWR维持在1.5左右比较合适；而在太空之中，为了保证机动的灵活性，推重比一般保持在2～5之间都可以。 太空中的推重比？ 众所周知，太空中是没有重力的（重力微乎其微，可以忽略不计）所以在太空中的推重中的重力其实指的仍然是在轨道中心海平面附近的重力。 $\Delta V$在宇宙中航行，最绕不开的概念就是这个$\Delta V$，它的含义就是速度改变量。 无论是径向加速，或是侧向拐弯，都需要用到喷射燃料来获得加速度改变当前的惯性速度方向，但是燃料的消耗世界上会让火箭的质量变小，其速度改变需要的能量也就越小，所以直接用燃料剩余量是不方便也不直观的，于是我们提出了$\Delta V$这样一个抽象的概念，表示火箭的剩余机动能力（结果上来说可以认为它是一个更加精确科学的“剩余燃料量“） $\Delta V$地图 这张地图显示了从Kerbin飞到太阳系内的每一个天体所需要的$\Delta V$的数量。 例如，我想从Kerbin出发降落到月球Mun，我首先需要3400m/s的燃料进入Kerbin的环绕轨道，然后860m/s的燃料进行霍曼转移，310m/s的燃料进入绕月轨道，最后580m/s左右的燃料降落在月球表面。 所以在设计这艘月球探险飞船我总共需要5150m/s，考虑到操作的不精确带来的损耗，再增加10%的裕量，携带5500m/s的燃料是一个合理的选择。 等等，我们还没考虑到回来？ 由于返程不需要降落燃料（地球大气可以提供空气刹车！），所以我们返程大约需要580 + 310 = 890m/s左右的燃料，只要进行设计轨道，被地球引力捕获进入大气层就可以舒舒服服的让空气摩擦为我们减速降落。（当然这里要考虑过热控制，这就是另外一个话题咯） 火箭方程那么$\Delta V$是如何计算的呢？那就要请出大名鼎鼎的火箭方程了： $$\Delta V = v_{e}ln\frac{m_{0}}{m_{1}}$$ $m_{0}$ 是火箭加速前的纯质量总合，即初始总质量 $m_{1}$ 是火箭加速后的纯质量的总和，消耗掉的质量就是燃料的质量 $v_{e}$ 是火箭排气速度(火箭喷射速度)，该速度与时间、地球重力加速度。 在游戏中的引擎有一个重要的参数叫做比冲$I_{sp}$，为了简化实际的计算，可以认为$v_{e} = I_{sp} * 9.81 m/s$ 在实际应用中，我们通过使用：大型运载火箭来增加 $m_{0}$；对火箭分级来减小 $m_{1}$；更先进的发动机来增加 $I_{sp}$，来实现取得为了达到获得较大的 $\Delta V$ 的目的。 极限$\Delta V$游戏中的每一个引擎都有它的极限$\Delta V$，如下表所示： Isp(Vac) (s) Max $\Delta V$ (m/s) 引擎 250 5394 O-10 “Puff” 290 6257 LV-1R “Spider” 24-77 “Twitch” 300 6473 KR-1x2 “Twin-Boar” 305 6581 CR-7 R.A.P.I.E.R. Mk-55 “Thud” 310 6689 LV-T30 “Reliant” RE-M3 “Mainsail” 315 6797 LV-1 “Ant” KS-25 “Vector” KS-25x4 “Mammoth” 320 6905 48-7S “Spark” LV-T45 “Swivel” RE-I5 “Skipper” 340 7336 KR-2L+ “Rhino” T-1 “Dart” 345 7444 LV-909 “Terrier” 350 7552 RE-L10 “Poodle” 800 21837 LV-N “Nerv” 4200 33751 IX-6315 “Dawn” 这是怎么计算的呢？ 假想在一个引擎前端增加燃料罐，一直增加到无限的燃料罐，似乎好像有无穷无尽的燃料，可以一直燃烧下去才对？ 但是燃料罐本身也有质量，这部分质量我们称之为「死重」，就是不能作为燃料而喷射的质量。 如果无限的增加燃料罐，最终会让火箭公式中的 $\frac{m_{0}}{m_{1}}$ 无限接近于$\frac{燃料罐总质量}{燃料罐死重}$，而这个比值在游戏里刚好是一个常数，大约是9。也就是说，在游戏里面，如果有一个9吨的燃料罐，那么它其实只含8吨燃料，有1吨是罐子本身的重量。 注意这个比值对最后两种引擎不成立，那是因为，他们用的是另一种燃料，氙气。 环绕轨道卫星由于万有引力作用，会围绕着中心做椭圆运动。假如一颗飞船围绕着Kerbin环绕，那么Kerbin就处在这个椭圆轨道的某个焦点上。 近地点 &amp; 远地点就是轨道中离Kerbin最近或者最远的那个点（两个尖头） 亚轨 &amp; 低轨 &amp; 高轨指的就是轨道的高度。 Kerbin的大气层高度是69KM，如果近地点小于这个大气高度，那么飞船最终还是会掉下去的，这就是亚轨道，没有形成真正的环绕轨道。 如果近地点已经大于69KM了，那么就真正进入了环绕轨道。一般认为600KM以内是低空轨道，以上则为高空轨道。 同步轨道 同步轨道是一种特殊的轨道。 首先，它是一个圆轨，也就是说近地点高度和远地点高度一致，卫星做圆周运动。 其次，我们知道轨道高度越高，线性速度越慢。同步轨道的高度，刚刚好和Kerbin的自转速度一样。从Kerbin观察这颗卫星，就好像悬停在空中一样。 Kerbin的同步轨道高度是 2868.75 KM，只有赤道正上方这么一条同步轨道，可以说是非常稀缺的资源了。 霍曼转移 霍曼转移是德国物理学家瓦尔特霍曼提出的一种太空变轨方法，相对的节省燃料，是我们在游戏中经常要使用的转移技巧。 如图所示，飞行器在近地点加速，进入圆轨道，然后熄火到达远地点之后，再次加速将轨道拉成圆轨。 这种方式不做多余的加速和减速，是节约燃料的最优方式， 引用目录 KSP Wiki cheat sheet 霍曼转移轨道]]></content>
      <categories>
        <category>游戏</category>
        <category>KSP</category>
      </categories>
      <tags>
        <tag>KSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkIndex - 标题索引小工具]]></title>
    <url>%2F2017%2F04%2F28%2Fmarkindex%2F</url>
    <content type="text"><![CDATA[今天在写一个巨大的Markdown文件的时候，需要给标题添加一个数字序号，方便组织整理，但纯粹用手打效率太低了一点，于是便写一个小工具来自动为Markdown文件的标题按照层级添加索引，日后还可以加上自动生成Table of content的小功能。 源代码查看这里Github地址 使用方法很简单，这是原始的Markdown文件: 然后对它执行: 1python markindex.py example.md 随后脚本生成了一个新的Markdown文件（为了不覆盖原文件）：example-1.md，它的内容是： 脚本自动为您的Markdown文件的标题添加了数字索引，按照1.1, 1.1.1这样的格式。 注意此处一级标题被忽略了，因为他们通常是总标题，无须添加索引。 您可以使用-h, –help选项来查看更多操作： 1234567891011usage: markindex.py [-h] [-r] [-f] markdown [markdown ...]Add Index to markdown titles.positional arguments: markdown markdown files to modifyoptional arguments: -h, --help show this help message and exit -r, --rm remove index, instead of adding it. -f, --force cover the original file, use with caution. 还可以添加若干小功能，这就之后再说吧]]></content>
      <categories>
        <category>技术</category>
        <category>Projects</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Utils</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在Linux上安装Docker]]></title>
    <url>%2F2017%2F04%2F13%2Finstall-docker-on-linux%2F</url>
    <content type="text"><![CDATA[通常在使用一个虚拟机后我们会在虚拟机上安装Docker，针对不同的Linux发行版安装的方式略有不同 Ubuntu 16.041234567apt updateapt install apt-transport-https ca-certificatesapt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609Decho "deb https://apt.dockerproject.org/repo ubuntu-xenial main" | sudo tee /etc/apt/sources.list.d/docker.listapt update#apt-get install linux-image-extra-$(uname -r) linux-image-extra-virtualapt-get install docker-engine 将会安装好Docker，随后运行 1service docker start 即可启动Docker服务。 Arch Linux在Arch Linux上安装似乎十分简单，只需要 1pacman -S docker 不愧是备受推崇的Linux版本。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[找回忘记的GPG密码]]></title>
    <url>%2F2017%2F04%2F12%2Frecover-gpg-passphase%2F</url>
    <content type="text"><![CDATA[最近打算从远程服务器传输一些私密文件回来，就用GPG给数据包加密然后百度盘下载回来。到了解密的时候，居然发现自己忘记了GPG私钥的密码，十几个G的数据可能就白白下载了。不甘心，于是打算自己黑掉自己的GPG密码。 什么是GPG？ GNU Privacy Guard（GnuPG或GPG）是一种加密软件，它是PGP加密软件的满足GPL的替代物。GnuPG依照由IETF订定的OpenPGP技术标准设计[2]。GnuPG用于加密、数位签章及产生非对称匙对的软件。 以上是Wikipedia对于GPG的定义。 GPG实际上就是自由软件基金会开源的一款加密软件，它采用非对称加密，封装了加密、解密、签名、验证等等一系列功能。 我们需要破解什么？GPG帮助我管理了我的个人私钥，并且用一个密码将私钥保护了起来。没有这个密码，我就无法使用私钥，没有私钥，我就没办法解密我的数据。 所以我就是要破解保护私钥的密码。 JohnTheRipperJohnTheRipper是我使用的主要工具，它是一个老牌的密码破解工具。除了使用John 的本体，还需要一个它附带的小工具gpg2john，将gpg的加密数据转换为John可以理解的哈希文件。 在上面的Github仓库中可以找到详细的安装说明，跟着相关步骤编译、安装好JohnTheRipper以及gpg2john。 开始破解接下来是破解的详细流程， 我会尽量做好每一步的说明，并且假设执行文件john以及gpg2john在PATH里面。如果出现找不到命令，你可以考虑将其加入PATH，或者将命令替换成完整的路径。 首先是gpg的密钥数据库，它位于 1~/.gnupg/secring.gpg 用gpg2john把它转换成john能理解的hash值，执行 1gpg2john ~/.gnupg/secring.gpg &gt; hash 当前目录下就多出了一个名为hash的文件，接下来就可以使用john来破解这个文件了： 1john hash 就这么简单，但是效率不够。 在默认参数下，john仅仅只会去尝试一些比较弱智的密码组合。在密码设置的非常简单的时候也许可以有效，但是在密码稍微复杂点情况下，就很难尝试出正确的密码了。 我们接下来需要做的就是生成一个密码字典，让john去努力的一个个尝试。 密码字典根据回忆写出可能的密码组合，然后使用Python脚本给它们分别加上前缀后缀，或者再次组合。 123456import itertoolspossible_words = [ "password", "abcefg", "123"]for i in itertools.permutations(possible_words): print(i) 根据具体的情况，编写出相应的变形脚本，生成出能够覆盖你常用密码以及其可能变种的字典，保存到wordlist.txt中。这里我生成了一个300词左右的字典。 再次破解1john --wordlist=wordlist.txt hash 很快的，John就在字典中找到了正确的密码！ 这一步最需要耐心与思考，好好回忆自己常用的密码体系与规则，将可能使用的变种（大写小写，前缀后缀字符）都生成出来，一定能够尝试出正确的密码。 纯粹的暴力破解的可能性在我的Early 2015 13’ MBP上跑hash的速度大约是100条/s。考虑在有显卡加速的台式机上运行，取一个平均值，大约能达到5000条/s的速度。 基于这个基础，我们来估算： 纯数字密码10位以内，需要100亿次尝试，需要跑555.6小时，也就是23天左右 大写加小写与数字的8位密码，大约需要200万亿次尝试，需要505416.9天，也就是1384年。 可见暴力破解不可取，还是要好好的回忆密码字典。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hacks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python 中的 Json 模块性能对比]]></title>
    <url>%2F2016%2F11%2F27%2Fpython-json-benchmark%2F</url>
    <content type="text"><![CDATA[Json是开发中经常用到的一种轻量级数据交换格式。我们经常用到的Json模块有json simplejson flask.json ujson。他们之间性能有多大差距呢？让我们来做个实验对比。测试项目总共包含四项： 简单Json字符解码 复杂Json字符解码 简单Json对象编码 复杂Json对象编码 测试环境：Python 3.5.2 macOS 10.12.1 RMBP 13 Early 2015 测试代码开源于Github 通过运行测试，我们得到了以下数据(各执行10万次)： simple_load complex_load simple_dump complex_dump json 0.36s 3.50s 0.53s 5.72s simplejson 0.44s 3.37s 0.71s 8.41s flask.json 5.80s 4.37s 1.83s 13.55s ujson 0.08s 2.60s 0.08s 2.66s 可以看出，ujson的性能最佳，json和simplejson的性能较为接近，flask.json的性能则比较落后了 结论：推荐使用ujson模块。]]></content>
      <categories>
        <category>技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS系统服务]]></title>
    <url>%2F2016%2F08%2F03%2Fmacos-system-service-config%2F</url>
    <content type="text"><![CDATA[macOS系统服务实际上是由 launchctl 管理的一批 plist 文件。 当前用户级别的系统服务存储在 ~/Library/LaunchAgents/ 一个典型的系统服务启动项目如下： 1234567891011121314151617&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;&lt;plist version="1.0"&gt; &lt;dict&gt; &lt;key&gt;Label&lt;/key&gt; &lt;string&gt;com.azlisme.cow&lt;/string&gt; &lt;key&gt;ProgramArguments&lt;/key&gt; &lt;array&gt; &lt;string&gt;/Users/azlisme/.cow/cow&lt;/string&gt; &lt;string&gt;-rc=/Users/azlisme/.cow/rc&lt;/string&gt; &lt;/array&gt; &lt;key&gt;RunAtLoad&lt;/key&gt; &lt;true/&gt; &lt;key&gt;KeepAlive&lt;/key&gt; &lt;true/&gt; &lt;/dict&gt;&lt;/plist&gt; 必要的参数是 Label 和 ProgramArguments Label 是服务的识别名称 ProgramArguments 是程序的启动脚本，如果是Shell程序则直接指定执行文件路径和参数。这里的路径全部采用绝对路径。 RunAtLoad 表示是否开机启动。 KeepAlive 表示是否让服务保持运行。 编辑完成服务项目之后，使用如下命令加载服务 1launchctl load &lt;Service Name&gt; 如果配制正确，那么服务已经在后台运行了。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>macOS</tag>
      </tags>
  </entry>
</search>
